There are two schools of thought here. One is that we can just
make the arrays fixed-length like in C++ or Rust,

    let array = [3, 4, 5, 6]
    typeof(array) == "[int : 4]"

which is nice because it's super easy to make these and allows
for a lot of optimization. On the other hand, it is cumbersome
to write. I think that either way this is the right approach
because it's tried and tested.

The real sauce comes when we want dynamically resizable arrays.
I simply refuse to call these "vectors" and instead will opt for
either `ArrayList` like in Java or `Seq` like in Nim. The option
is whether or not to implement these in the standard library,
written in C++ or to implement them in the compiler as a
primitive type.

The fact that fixed-length arrays are primitive types makes it
easier to do more optimization and make them very fast. It would
be cool to do the same with sequences.

    let seq = { 5, 10, 15, 20 }
    typeof(seq) == "Seq<int>" # STDL implementation
                or
    typeof(seq) == "int{}"    # Primitive implementation

I'm kind of leaning towards the primitive implementation so let's
take a look at what that looks like.

function stuff(seq: int{}) -> int{}
    
    # Iteration through the sequence
    for _, s in seq do
        print(s)
    end

    # error, modifying a sequence while iterating through it
    for i, s in seq do
        seq[i] = s + 1 
    end

    # the correct alternative:
    # the primitive implementation will take advantage of SIMD registers
    # to accomplish scalar things like this
    let incremented = seq.map(function(x: int) return x + 1; end).collect();

    # alerative to this:
    function increment(x: int) -> int return x + 1; end
    let incremented = seq.map(increment)

    # another alterative, though kind of stupid
    let incremented = seq |> int{}.map(
        function(x: int)
            return x + 1
        end
    )
    |> int{}.collect()

    # indexing into a sequence (1-based indexing because im evil)
    let i_1 = seq[1]
    let i_2 = seq[2]

    # bounds checking is done at runtime to avoid undefined behavior
    # but you should just do it yourself

    if len(seq) <= 1 then
        let i_1 = seq[1]
    end
end